# apiVersion указывает версию API Skaffold, которую следует использовать.
# kind определяет тип ресурса Skaffold - в данном случае это Config.
# build определяет, каким образом должна происходить сборка образов Docker.
# artifacts определяет список артефактов, которые следует собрать.
# image определяет имя образа.
# custom определяет специфичные для проекта настройки для сборки образа, такие как команды сборки и зависимости.
# dependencies указывает пути к зависимостям, необходимым для сборки проекта.
# tagPolicy определяет, как должны генерироваться теги для образов Docker.
# deploy указывает, каким образом должен происходить деплой приложения.
# kustomize определяет, каким образом должны применяться конфигурационные файлы Kubernetes.
# paths указывает пути к файлам, которые должны быть применены при деплое.
# logs определяет формат логирования.
# portForward определяет правила перенаправления портов между локальным компьютером и контейнерами Kubernetes.
# profiles определяет профили, которые могут быть использованы для изменения конфигурации Skaffold в зависимости от необходимых потребностей.

apiVersion: skaffold/v2beta28
kind: Config
build:
  artifacts:
    - image: l0-validator
      custom:
        buildCommand: |
          sbt core/assembly keytool/assembly && \
            docker build $BUILD_CONTEXT --file kubernetes/l0.Dockerfile --tag $IMAGE --build-arg BUILD_VERSION=$(cut -d \" -f 2 version.sbt) --platform linux/amd64 && \
              [[ "$PUSH_IMAGE" == "true" ]] && docker push $IMAGE || echo "Skip pushing image"
        dependencies:
          paths:
            - modules/**/src/main/**/*.scala
            - "*.sbt"
            - project/*.scala
            - project/**.sbt
            - project/build.properties
    - image: l1-validator
      custom:
        buildCommand: |
          sbt dagL1/assembly keytool/assembly && \
            docker build $BUILD_CONTEXT --file kubernetes/l1.Dockerfile --tag $IMAGE --build-arg BUILD_VERSION=$(cut -d \" -f 2 version.sbt) --platform linux/amd64 && \
              [[ "$PUSH_IMAGE" == "true" ]] && docker push $IMAGE || echo "Skip pushing image"
        dependencies:
          paths:
            - modules/**/src/main/**/*.scala
            - "*.sbt"
            - project/*.scala
            - project/**.sbt
            - project/build.properties
  tagPolicy:
    inputDigest: {}

deploy:
  kustomize:
    paths:
      - kubernetes/l0-cluster
      - kubernetes/l1-cluster
      - kubernetes/grafana
      - kubernetes/prometheus
      - kubernetes/loki
      - kubernetes/nginx
  logs:
    prefix: podAndContainer

portForward:
  - resourceType: service
    resourceName: l0-initial-validator
    port: 9000
    localPort: 9000
  - resourceType: service
    resourceName: l1-initial-validator
    port: 9000
    localPort: 9010
  - resourceType: service
    resourceName: grafana
    port: 3000
    localPort: 3000
  - resourceType: service
    resourceName: http-proxy
    port: 8080
    localPort: 8080

profiles:
  - name: chaos
    patches:
      - op: add
        path: /portForward/-
        value:
          resourceType: service
          resourceName: chaos-dashboard
          namespace: chaos-mesh
          port: 2333
          localPort: 2333
      - op: add
        path: /deploy/kustomize/paths/-
        value: kubernetes/chaos-mesh
